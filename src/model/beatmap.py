# -*- coding: utf-8 -*-
import os
from collections import Counter
from typing import Self

__all__ = ['Beatmap', 'BeatmapManager']


class Beatmap:
    """
    The class implements the beatmap datatype.

    Attributes:
        sid: The sid of the beatmap.
        artist: The artist of the beatmap.
        name: The name of the beatmap.
    """

    def __init__(self, sid: str = '', artist: str = '', name: str = '') -> None:
        """ Initializes the beatmap. """
        self.sid = sid
        self.artist = artist
        self.name = name

    def __str__(self) -> str:
        """ Returns the beatmap as a string. """
        return str(self.__dict__)

    def __hash__(self) -> int:
        """ Returns the hash of the beatmap generated by sid. """
        return hash(self.sid)

    def __eq__(self, other: Self) -> bool:
        """ Compares the beatmap with another one by sid. """
        return self.sid == other.sid

    def __contains__(self, x: str) -> bool:
        """
        Checks whether the string belongs to the beatmap.

        Parameters:
            x: The string to check.
        """
        x = x.lower()
        sid_lower = self.sid.lower()
        artist_lower = self.artist.lower()
        name_lower = self.name.lower()
        return x in sid_lower or x in artist_lower or x in name_lower


class BeatmapManager:
    """ The class provides API to beatmap management. """
    _beatmaps: list[Beatmap]

    def __init__(self) -> None:
        """ Initializes the beatmap manager. """
        self._beatmaps = []

    @property
    def beatmaps(self) -> list[Beatmap]:
        """ Returns the beatmaps. """
        return self._beatmaps

    def load(self, path: str = None) -> None:
        """
        Loads beatmap data from the path.

        Parameters:
            path: The path to the Songs directory of osu! game.
        """
        if not path or not os.path.exists(path):
            return

        for i in os.listdir(path):
            try:
                beatmap = self._parse_beatmap(i)
                self._beatmaps.append(beatmap)
            except ValueError:
                pass

    def filter(self, key: str = '') -> list[Beatmap]:
        """
        Returns the beatmaps with the keyword. The keyword is case-insensitive.
        If the keyword is an empty string, returns all the beatmaps.

        Parameters:
            key: The keyword to filter.
        """
        return [i for i in self._beatmaps if key in i]

    def check(self) -> list[Beatmap]:
        """
        Checks whether the beatmaps have duplicated sid.

        Returns:
            The beatmaps with the duplicated sid.
        """
        return [beatmap for beatmap, count in Counter(self._beatmaps).items() if count > 1]

    @staticmethod
    def _parse_beatmap(filename: str) -> Beatmap:
        """ Parses beatmap data from the filename. """
        tmp, name = filename.split(' - ', 1)
        sid, artist = tmp.strip().split(' ', 1)
        return Beatmap(sid, artist, name)
